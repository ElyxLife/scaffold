# TEMPLATE WORKFLOW - Automatic triggers disabled
# To enable this workflow in your project:
# 1. Uncomment the triggers under 'on:' section
# 2. Ensure you have a terraform/ directory with your infrastructure code
# 3. Configure proper backend and variable files for your Terraform setup

name: Infrastructure CI

permissions:
  contents: read

on:
  # Automatic triggers disabled for template project
  # push:
  #   paths:
  #     - 'terraform/**'
  # pull_request:
  #   paths:
  #     - 'terraform/**'
  workflow_dispatch:

jobs:
  terraform-validation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check if terraform directory exists
      run: |
        if [ ! -d "terraform" ]; then
          echo "‚ùå terraform/ directory not found. This appears to be a template project."
          echo "To use this workflow, create a terraform/ directory with your infrastructure code."
          exit 0
        fi

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest

    - name: Terraform Format Check
      working-directory: ./terraform
      run: terraform fmt -check -recursive

    - name: Terraform Init (CI validation only)
      working-directory: ./terraform
      run: |
        # Temporarily remove backend config for CI validation
        mv backend.tf backend.tf.bak
        terraform init
        # Restore backend config
        mv backend.tf.bak backend.tf

    - name: Terraform Validate
      working-directory: ./terraform
      run: terraform validate

    - name: Terraform Plan (Dry Run)
      working-directory: ./terraform
      run: |
        # Use existing example files for validation
        terraform plan -var-file=terraform.tfvars.example -var-file=terraform.auto.tfvars.secrets.example -out=plan.tfplan || true
        
        echo "Terraform validation completed"